> show libraryDependencies
> cleanFull
> + Test/compile

> check

# Try with utest
> reload
> cleanFull
> set doctestTestFramework := DoctestTestFramework.MicroTest
> doctestTestFramework
> + test
> set Test / testOptions := Seq(Tests.Filter(s => s.contains("Failing")))
-> +test

# Try with scalatest
> reload
> cleanFull
> set doctestTestFramework := DoctestTestFramework.ScalaTest
> doctestTestFramework
> + test
> checkScalatestPlugScalacheck
> set Test / testOptions := Seq(Tests.Filter(s => s.contains("Failing")))
-> +test

# Try with specs2
> reload
> cleanFull
> set doctestTestFramework := DoctestTestFramework.Specs2
> doctestTestFramework
> + test
> set Test / testOptions := Seq(Tests.Filter(s => s.contains("Failing")))
-> +test

# Try with scalacheck
> reload
> cleanFull
> set doctestTestFramework := DoctestTestFramework.ScalaCheck
> doctestTestFramework
> + test
> set Test / testOptions := Seq(Tests.Filter(s => s.contains("Failing")))
-> +test

# Try with minitest
> reload
> cleanFull
> set doctestTestFramework := DoctestTestFramework.Minitest
> doctestTestFramework
> + test
> set Test / testOptions := Seq(Tests.Filter(s => s.contains("Failing")))
-> +test

# Try with munit
> reload
> cleanFull
> set doctestTestFramework := DoctestTestFramework.Munit
> doctestTestFramework
> + test
> set Test / testOptions := Seq(Tests.Filter(s => s.contains("Failing")))
-> +test
